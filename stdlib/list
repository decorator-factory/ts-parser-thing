IO:define :cons (head rest. {h: head, r: rest, empty: false});

IO:define :nil {empty: true};

IO:define :match (empty nonempty list. if list:empty then empty else nonempty (list:h) (list:r));

IO:define :map
    (f list.
        if list:empty
            then nil
            else cons (list:h |> f) (list:r |> map f)
    );

IO:define :filter
    (f list.
        if list:empty
            then nil
            else if list:h |> f
                then cons (list:h) (list:r |> filter r)
                else filter f r

    );

IO:define :reduce
    (f initial list.
        if list:empty
            then initial
            else reduce f (f initial (list:h)) (list:r)
    );

{ cons: cons, nil: nil, map: map, filter: filter, reduce: reduce }