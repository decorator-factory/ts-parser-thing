:cons .= (head rest. {h: head, r: rest, empty: false});

:nil .= {empty: true};

:map .=
    (f list.
        if list:empty
            then nil
            else cons (list:h |> f) (list:r |> map f)
    );

:filter .=
    (f list.
        if list:empty
            then nil
            else if list:h |> f
                then cons (list:h) (list:r |> filter r)
                else filter f r

    );

:reduce .=
    (f initial list.
        if list:empty
            then initial
            else reduce f (f initial (list:h)) (list:r)
    );

:reverse .=
    reduce (acc item. cons item acc) nil;

:_of .=
    (after acc sym x.
        if Sym:is :nil x
            then after acc
            else _of after (cons x acc) sym
    );

:of_using .= _of reverse nil;

:of .= of_using :nil;

{
    cons: cons,
    nil: nil,
    map: map,
    filter: filter,
    reduce: reduce,
    of: of,
    of_using: of_using,
    reverse: reverse,
}