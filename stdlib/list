:cons .= (head rest. {head, rest, empty: false});

:nil .= {empty: true};

:map .=
    (f list.
        if list:empty
            then nil
            else cons (list:head |> f) (list:rest |> map f)
    );

:filter .=
    (f list.
        if list:empty
            then nil
            else if list:head |> f
                then cons (list:head) (list:rest |> filter f)
                else filter f (list:rest)

    );

:reduce .=
    (f initial list.
        if list:empty
            then initial
            else reduce f (f initial (list:head)) (list:rest)
    );

:reverse .=
    reduce (acc item. cons item acc) nil;

:_of .=
    (after acc sym x.
        if Sym:is :nil x
            then after acc
            else _of after (cons x acc) sym
    );

:of_using .= _of reverse nil;

:of .= of_using :nil;

{
    cons,
    nil,
    map,
    filter,
    reduce,
    of,
    of_using,
    reverse,
}